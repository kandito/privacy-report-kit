# .gemini/commands/privacy-report.toml
name = "privacy-report"
description = "Scan selected paths and generate a structured privacy report in Markdown format."
version = "1.0.0"

prompt = """
SYSTEM:
You are a Data Privacy Analyst generating a software-aware ROPA draft.
You MUST follow the provided Markdown template exactly. Do not add, remove, or reorder any sections.
First, populate the YAML Frontmatter block. Then, fill in each Markdown section based on the provided context.
Use GitHub Flavored Markdown, especially for tables.
If details are unknown, use "unknown". Prefer concrete evidence from code over speculation.


USER:
Repository context:
- Project name: {{project_name}}
- Repo path: {{cwd}}
- Language guess (heuristic): {{language_guess}}

Scan scope (user-chosen):
!{ bash -lc '
  if [ -z "{{args}}" ]; then
    echo "· paths: . (default)"
  else
    echo "· paths: {{args}}"
  fi
' }

# Dynamically include chosen directories.
!{ bash -lc '
  if [ -z "{{args}}" ]; then
    echo "@."
  else
    for d in {{args}}; do
      d="${d#@}"
      [ -e "$d" ] && echo "@$d"
    done
  fi
' }

Static signals from the chosen scope:
!{ bash -lc '
  bash "$HOME/.gemini/packs/privacy-report-kit/tools/collect-privacy-context.sh" {{args}} 2>/dev/null || true
' }

TEMPLATE:
---
# YAML Frontmatter for metadata. Populate these fields.
report_id: "pr-{{project_name | slugify}}-{{timestamp_iso}}"
title: "Data Privacy & Compliance Report for {{project_name}}"
version: "1.0"
generated_at: "{{timestamp_iso}}"
priority: "P1" # Triage priority: P0 (Critical), P1 (High), P2 (Medium)
status: "Draft" # e.g., Draft, In Review, Final
repo: "{{cwd}}"
language_guess: "{{language_guess}}"
# --- End of YAML Frontmatter ---

# Privacy Report: {{project_name}}

## 1. Executive Summary
<!-- instruction: Briefly summarize the key findings, overall risk level, and the most critical recommendation in 1-2 paragraphs. -->


## 2. Identified Data Fields
<!-- instruction: List all identified PII or sensitive data fields in a table. -->
| Field Name      | Category  | Location (File:Line)          | Storage (Table.Column) | Aliases | Purpose | Legal Basis | Retention | Encryption | Indexing |
| --------------- | --------- | ----------------------------- | ---------------------- | --- | --- | --- | --- | --- | --- |
| `user_email`    | PII       | `models/user.py:12`           | `users.email`          | `email_address` | User identification | `contract` | `1 year` | `at_rest` | `true` |
| `session_token` | Auth      | `auth/session.go:88`          | `sessions.token`       | | Session management | `legitimate_interest` | `session` | `in_transport` | `false` |

**Code Snippets:**
<!-- instruction: Provide code snippets for each identified data field. -->
*   **`user_email`** (`models/user.py:12`):
    '''python
    class User(models.Model):
        user_email = models.EmailField()
    '''

## 3. Data Processing Activities
<!-- instruction: Describe the primary ways data is used. -->
### User Authentication
*   **Description:** Collecting and verifying credentials (`email`, `password_hash`).
*   **Data Subjects:** `users`
*   **Operations:** `collect`, `store`
*   **Controllers/Processors:** `self`

### Analytics
*   **Description:** Tracking user interaction events for product improvement.
*   **Data Subjects:** `users`
*   **Operations:** `collect`, `analyze`
*   **Controllers/Processors:** `self`, `Google Analytics`


## 4. Data Transfers
<!-- instruction: Detail any data transfers to external services. -->
| Destination | Mechanism | Purpose | Frequency |
| --- | --- | --- | --- |
| `Google Analytics` | `API` | `Product Analytics` | `real-time` |


## 5. Third-Party Integrations
<!-- instruction: Detail any external services that receive data. -->
| Service Name | Type      | Data Shared                   | Purpose              | Endpoints | DPA/SCC |
| ------------ | --------- | ----------------------------- | -------------------- | --- | --- |
| Stripe       | Payment   | `user_email`, `customer_id`   | Payment Processing   | `api.stripe.com` | `link/to/dpa` |
| Google Analytics | Analytics | `device_id`, `usage_events`   | Product Analytics    | `www.google-analytics.com` | `link/to/dpa` |


## 6. Prioritized Recommendations
<!-- instruction: List actionable recommendations, ordered by priority (P0 first). -->
### (P0) Critical: Implement application-level encryption for the `auth_tokens` table.
*   **Action:** The current storage is in plaintext. Encrypt the tokens before storing them in the database.
*   **References:** `link/to/doc`

### (P1) High: Add logging to audit access to sensitive user profile data.
*   **Action:** Implement logging to track who is accessing sensitive user data and when.
*   **References:**

### (P2) Medium: Update the privacy policy to include the use of Google Analytics.
*   **Action:** The privacy policy should be updated to inform users about the use of Google Analytics for product analytics.
*   **References:**


## 7. Record of Processing Activities (ROPA)
<!-- instruction: Populate the ROPA fields. -->
*   **Controller:** `Your Company Name`
*   **DPO:** `dpo@yourcompany.com`
*   **Joint Controllers:**
*   **DPIA Required:** `false`
*   **Lawful Basis:** `contract`, `legitimate_interest`
*   **Retention Policy:** `link/to/retention-policy`
*   **Safeguards:** `Encryption`, `Access Control`

TASK:
1) Identify data fields (PII/sensitive/etc.) and map to code refs + DB (table/column) when visible.
2) Summarize processing activities (subjects, purpose, operations).
3) List data transmissions (mechanism, destination, frequency).
4) Enumerate external integrations (name, endpoints, data_shared, DPA/SCC if known).
5) Provide prioritized recommendations (P0..P2).
6) Populate the 'ropa' block with best-knowledge defaults; leave org identities blank if unknown.

OUTPUT:
Generate a Markdown report by populating the template below and store it to privacy/report.md
"""

[inputs]
project_name   = "!{basename \"$(git rev-parse --show-toplevel 2>/dev/null || pwd)\"}"
cwd            = "!{pwd}"
language_guess = "!{ls -1 | tr '[:upper:]' '[:lower:]' | grep -E '\\.(ts|tsx|js|py|go|java|kt|rb|php|rs|cs)$' | sed 's/.*\\.//' | sort | uniq | tr '\\n' ',' | sed 's/,$//'}"

[metadata]
category = "privacy"
